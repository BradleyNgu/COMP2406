COMP 2406 2024F Assignment 1
Name: Bradley Nguyen
Student ID:101270011

1. I first began by reviewing the simpleserver2.js file. Here, I was looking for the portion of code responsible for reading and serving files. Next, I located the fileData function which 
reads the requested file with the line contents = await Deno.readFile("./www" + path_);. Here, I realized that the path is being prefixed with ./wwww which shows that this is the directory 
being used to serve content. I can verify this by creating a basic index.html file in the designated directory and started the server. Here by accessing http://localhost:8000, 
it shows that it correctly served the file from this directory.


2. I first looked at the MIMEtype function, which is responsible for determining the MIME type of the files served by the server. Here, I noticed that the MIME types for common file 
extensions were listed, but there was no entry for .pdf. To confirm, I placed a .pdf file in the www directory and attempted to access it through the browser.
By doing this, the server returned the file, but the browser indicated that the MIME type was application/octet-stream, which is a generic MIME type and not specific to PDF files.


3. Here, I modified the MIMEtype function to be asynchronous by assigning the async keyword. Next I encountered errors in the fileData function becasue MIMEtype was now returning a 
Promise instead of a string. The function call needed to be awaited to retrieve the actual value. To fix this, I updated the fileData function by adding await before the MIMEtype call. 
This ensures that the MIME type was correctly retrieved before being used.


4a. First I looked at the handler function where requests are processed. Next, I decided to add a check for the HTTP method at the beginning of the function. 
If the method was not GET, I would return a 501 not Implemented response. Next, I implement this by adding the following code to the handler function:
     if (req.method !== "GET") {
        return new Response("Method not implemented", { status: 501 });
    }
All in all, I modified the handler function to check the request method and return a 501 Not Implemented response for non-GET requests.

4b. After implementing the check for the GET method, I wanted to be sure that only GET requests were handled. Here, I used curl to send both GET and POST requests to the server. Here I saw 
that the GET requests were served normally, while the POST requests returned the "Method not implemented" message with the status code 501. Here, no major issues arose.


5a. First, I identified that the template_notFound function was handcoded in the source. Next, I created a 404.html file in the www directory and modified the server to read the file during 
startip. Next I added the following initialization code to load the template at server startup: 
let notFoundTemplate = "";
async function init() {
  try {
    notFoundTemplate = await Deno.readTextFile("./www/404.html");
  } catch (e) {
    console.error("Error loading 404 template:", e);
  }
}
await init();
All in all, I added code to load the 404.html file during server initialization and replaced the template_notFound function with the loaded content.

5b. I believe my solution is correct because the template is now loaded from a file during server initialization which allows for easy updates to the 404 page without modifying the server code.

5c. The big issue that I kept encountering was the template was loaded asynchronously before the server started processing requests. Here I had to make sure that the init() function was awaited properly.

6a. First, I noticed that the code was using the URL object to extract the pathname from the URL. Here, I decided that the best approach was to use the URL object as it was designed for 
parsing URLs. Next, I updated the URL constructor to include the full request URL by combining req.url with the host header. This would allow me to use the .oathname property, which 
provides the path part of the URL without needing to manually parse the string or regular expression. I implemented it like this:
    
    var origpath = new URL(req.url, `http://${req.headers.get("host")}`).pathname;

All in all, I used JavaScript's built-in URL class to extract the path.

6b. I used MDN Web documentation on understanding how to use URL object. The pathname property section of the MDN Web Docs provided information on how to extract the path part of a URL.

6c. I started the simpleserve2 by running deno run --allow-net --allow-read simpleserver2.js. Here I accessed various URLs in the browser and check that the correct file was being served. Next, I used curl to send requests with URLs containing query parameters and fragments to ensure they were being ignored. Here the correct path was extracted as and ignored the query and fragment.

6d. First, I thought about using a regular expression, but in this case it would be unnecessary and too complex. Another problem was handling host information. Here, I ran into a minor issue 
when using the URL object because it expects a full qualified URL. To fix this, I first had to retrieve the host information using req.headers.get("host") and pass it as the second argument 
to the URL constructor.
